{"version":3,"sources":["components/Firebase/Firebase.ts","components/Firebase/FirebaseHOC.tsx","components/Form/Input/Input.tsx","lib/validation.ts","pages/SignUp/index.tsx","lib/actions.ts","store/common/actions.ts","lib/selectors.ts","store/common/selectors.ts","pages/LogIn/index.tsx","components/Layout/MainLayout.tsx","pages/NotFound/NotFound.tsx","routes/index.tsx","store/common/reducer.ts","store/common/sagas.ts","sagas/common/index.ts","sagas/index.ts","store/domain.ts","pages/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","_auth","auth","Firebase","logIn","email","password","signInWithEmailAndPassword","signUp","createUserWithEmailAndPassword","logOut","signOut","FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","length","InputWrapper","styled","div","UserInput","input","Decorator","span","isActive","isValid","ErrorMessage","memo","type","placeholder","meta","active","value","touched","error","minLength6","undefined","required","validEmail","test","String","toLowerCase","Submit","button","reduxForm","form","handleSubmit","location","useLocation","history","useHistory","qs","parse","search","ignoreQueryPrefix","token","className","style","color","display","fontSize","Form","onSubmit","values","_","a","async","console","log","push","noValidate","Field","name","component","Input","validate","SUFFIXES","defaultActionMaker","payload","logInAction","base","makeAction","actionCreator","pending","success","failure","asyncAction","get","path","obj","createSelector","createSelectorCreator","defaultMemoize","isEqual","selector","getUser","state","common","getUserIsLoading","getLocation","router","getRouterHashAndQuery","getRouterHash","routerHash","split","hash","SubmitText","mapStateToProps","isLoading","dispatch","useDispatch","useSelector","height","width","Layout","hashRouteName","MainLayout","children","routes","find","route","backgroundColor","NotFound","useState","opacity","setOpacity","useEffect","setTimeout","createBrowserHistory","SignUp","exact","LogIn","Router","render","TransitionGroup","CSSTransition","key","pathname","timeout","classNames","map","to","initialState","user","info","response","put","takeLatest","fork","rootSaga","rootReducer","combineReducers","action","connectRouter","formReducer","store","sagaMiddleware","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","routerMiddleware","run","configureStore","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0381b27.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n};\r\n\r\nfirebase.initializeApp(config);\r\nconst _auth = firebase.auth();\r\n// const _asd = firebase.app();\r\n\r\nclass Firebase {\r\n  // private _auth: ReturnType<typeof firebase.auth>;\r\n  // constructor() {\r\n  // }\r\n\r\n  logIn = (email: string, password: string) => _auth.signInWithEmailAndPassword(email, password);\r\n  signUp = (email: string, password: string) =>\r\n    _auth.createUserWithEmailAndPassword(email, password);\r\n  logOut = () => _auth.signOut();\r\n\r\n  // getApplicationVerifier = () => _asd.analytics()\r\n  // logInWithPhone = (number: string) => _auth.signInWithPhoneNumber(number);\r\n\r\n  //   doCreateUserWithEmailAndPassword = (email, password) =>\r\n  //     this.auth.createUserWithEmailAndPassword(email, password);\r\n  //   doSignInWithEmailAndPassword = (email, password) =>\r\n  //     this.auth.signInWithEmailAndPassword(email, password);\r\n  //   doPasswordReset = (email) => this.auth.sendPasswordResetEmail(email);\r\n  //   doPasswordUpdate = (password) => this.auth.currentUser.updatePassword(password);\r\n}\r\n\r\nexport default Firebase;\r\n","import React from 'react';\r\nimport Firebase from './Firebase';\r\n\r\nexport type FirebaseType = Firebase;\r\n\r\nexport interface WithFirebase {\r\n  firebase: FirebaseType;\r\n}\r\n\r\nconst FirebaseContext = React.createContext(new Firebase());\r\n\r\ntype HOC = <T extends WithFirebase>(\r\n  Component: React.ComponentType<T>,\r\n) => React.ComponentType<Omit<T, keyof WithFirebase>>;\r\n\r\nexport const withFirebase: HOC = <T extends WithFirebase>(\r\n  Component: React.ComponentType<T>,\r\n): React.ComponentType<Omit<T, keyof WithFirebase>> => (props) => (\r\n  <FirebaseContext.Consumer>\r\n    {(firebase: FirebaseType) => <Component {...(props as T)} firebase={firebase} />}\r\n  </FirebaseContext.Consumer>\r\n);\r\n\r\nexport default FirebaseContext;\r\n","import React, { InputHTMLAttributes } from 'react';\r\nimport { FieldType } from 'redux-form';\r\nimport styled from 'styled-components';\r\n\r\ninterface DecoratorProps {\r\n  isActive?: boolean;\r\n  isValid?: boolean;\r\n}\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  margin-top: 35px;\r\n`;\r\n\r\nconst UserInput = styled.input`\r\n  font-family: 'Poppins';\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  color: #555555;\r\n  line-height: 1.2;\r\n  display: block;\r\n  width: 100%;\r\n  height: 52px;\r\n  background: transparent;\r\n  padding: 0 5px;\r\n  border: none;\r\n  outline: none;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Decorator = styled.span`\r\n  position: absolute;\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  pointer-events: none;\r\n  &::before {\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    bottom: -2px;\r\n    left: 0;\r\n    width: 0;\r\n    height: 2px;\r\n    transition: all 0.4s;\r\n    background: #57b846;\r\n    ${({ isActive, isValid }: DecoratorProps) =>\r\n      (isActive || isValid) &&\r\n      `\r\n        width: 100%; !important;\r\n    `}\r\n    ${({ isValid }: DecoratorProps) =>\r\n      isValid &&\r\n      `\r\n        background: red !important;\r\n    `}\r\n  }\r\n  &::after {\r\n    font-family: 'Poppins';\r\n    font-weight: 500;\r\n    font-size: 18px;\r\n    color: #999999;\r\n    line-height: 1.2;\r\n    content: attr(placeholder);\r\n    display: block;\r\n    width: 100%;\r\n    position: absolute;\r\n    top: 15px;\r\n    left: 0px;\r\n    padding-left: 5px;\r\n    transition: all 0.4s;\r\n    text-align: left;\r\n    ${({ isActive }: DecoratorProps) =>\r\n      isActive &&\r\n      `\r\n        top: -20px !important;\r\n        font-size: 15px !important;\r\n    `}\r\n  }\r\n`;\r\n\r\nconst ErrorMessage = styled.span`\r\n  position: absolute;\r\n  top: 100%;\r\n  right: 0;\r\n  text-align: right;\r\n  margin: 5px;\r\n  font-size: 0.75em;\r\n  color: red;\r\n`;\r\n\r\ninterface OwnProps {}\r\n\r\nconst Input: React.FC<any> = (props) => {\r\n  // console.log(props);\r\n  return (\r\n    <InputWrapper>\r\n      <UserInput {...props.input} type={props.type} />\r\n      <Decorator\r\n        placeholder={props.placeholder}\r\n        isActive={props.meta.active || props.input.value}\r\n        isValid={props.meta.touched && props.meta.error}\r\n      />\r\n      {props.meta.touched && props.meta.error && <ErrorMessage>{props.meta?.error}</ErrorMessage>}\r\n    </InputWrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(Input);\r\n","const minLength = (length: number) => (value: string) =>\r\n  value.length >= length ? undefined : `Should be at least ${length} characters long`;\r\nexport const minLength6 = minLength(6);\r\nexport const required = (value: string) => (value ? undefined : 'Required');\r\nexport const validEmail = (value: string) => {\r\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(value).toLowerCase()) ? undefined : 'Invalid email';\r\n};\r\n","import React, { useState } from 'react';\r\nimport qs from 'qs';\r\nimport { withFirebase } from 'components/Firebase';\r\nimport { WithFirebase } from 'components/Firebase/FirebaseHOC';\r\nimport 'styles/form.css';\r\nimport { Field, reduxForm, InjectedFormProps, Form, FormSubmitHandler } from 'redux-form';\r\nimport Input from 'components/Form/Input/Input';\r\nimport { required, minLength6, validEmail } from 'lib/validation';\r\nimport styled from 'styled-components';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { RootState } from 'store/domain';\r\n\r\nexport const Submit = styled.button`\r\n  margin-top: 50px;\r\n  outline: none;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  padding: 10px 40px;\r\n  font-size: 20px;\r\n  font-family: 'Poppins';\r\n  font-weight: 500;\r\n  transition: box-shadow 0.15s ease-in;\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: 0px 1px 5px 1px gray;\r\n  }\r\n`;\r\n\r\ninterface SubmitValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface OwnProps extends InjectedFormProps<SubmitValues>, WithFirebase {}\r\n\r\nconst mapStateToProps = (state: RootState) => ({});\r\n\r\nconst SignUp: React.FC<OwnProps> = (props) => {\r\n  const { firebase, handleSubmit } = props;\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const onSubmit: FormSubmitHandler<SubmitValues> = async (values, _, props) => {\r\n    // @ts-ignore\r\n    // values.preventDefault();\r\n    // console.log(values, props);\r\n    // e.preventDefault();\r\n    // try {\r\n    //   if (firebase) {\r\n    //     const response = await firebase.signUp(email, password);\r\n    //   }\r\n    // } catch {}\r\n    // console.log(history);\r\n    console.log(values);\r\n    history.push('/logIn');\r\n  };\r\n\r\n  const isValidInvitationToken = () => {\r\n    const { REACT_APP_TOKEN } = process.env;\r\n    const params = qs.parse(location.search, { ignoreQueryPrefix: true });\r\n    return params.token === REACT_APP_TOKEN;\r\n  };\r\n\r\n  if (!isValidInvitationToken()) {\r\n    return (\r\n      <div className=\"layout\">\r\n        <div className=\"form-wrapper\">\r\n          <div>\r\n            <h2 style={{ color: 'red', display: 'inline', fontSize: '2em' }}>We are sorry</h2>\r\n            <h2 style={{ display: 'inline', fontSize: '2em' }}>\r\n              , but your invitation token is not valid. Please, ask for valid link to register.\r\n            </h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"layout\">\r\n      <div className=\"form-wrapper\">\r\n        <h1>Sign Up</h1>\r\n        <Form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n          <Field\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            component={Input}\r\n            type=\"email\"\r\n            validate={[required, validEmail]}\r\n          />\r\n          <Field\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            component={Input}\r\n            type=\"password\"\r\n            validate={[required, minLength6]}\r\n          />\r\n          <Submit type=\"submit\" className=\"submit \">\r\n            Submit\r\n          </Submit>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(\r\n  reduxForm<SubmitValues>({ form: 'sign-up' })(withFirebase(SignUp)),\r\n);\r\n","import { ActionCreator as AC } from 'redux';\r\n\r\ntype Payload = string | number | object | boolean;\r\n\r\ntype Action<T = Payload> = {\r\n  type: string;\r\n  payload?: T;\r\n};\r\n\r\ninterface SyncActionCreator<T> extends AC<Action<T>> {\r\n  success: string;\r\n}\r\n\r\ninterface AsyncActionCreator<T> extends AC<Action<T>> {\r\n  pending: string;\r\n  success: string;\r\n  failure: string;\r\n}\r\n\r\nexport const SUFFIXES = {\r\n  PENDING: 'PENDING',\r\n  SUCCESS: 'SUCCESS',\r\n  FAILURE: 'FAILURE',\r\n};\r\n\r\nconst defaultActionMaker = <P>(type: string, payload: P) => ({ type, payload });\r\n\r\ntype ACConfig<P> = {\r\n  makeAction?: AC<Action<P>>;\r\n};\r\n\r\nexport function asyncAction<P = Payload>(\r\n  base: string,\r\n  { makeAction = defaultActionMaker }: ACConfig<P> = {},\r\n): AsyncActionCreator<P> {\r\n  const actionCreator = (payload: P) => makeAction(`${base}/${SUFFIXES.PENDING}`, payload);\r\n\r\n  actionCreator.pending = `${base}/${SUFFIXES.PENDING}`;\r\n  actionCreator.success = `${base}/${SUFFIXES.SUCCESS}`;\r\n  actionCreator.failure = `${base}/${SUFFIXES.FAILURE}`;\r\n  return actionCreator;\r\n}\r\n\r\nexport function syncAction<P = Payload>(\r\n  base: string,\r\n  { makeAction = defaultActionMaker }: ACConfig<P> = {},\r\n): SyncActionCreator<P> {\r\n  const actionCreator = (payload: P) => makeAction(base, payload);\r\n\r\n  actionCreator.success = base;\r\n  return actionCreator;\r\n}\r\n","import { asyncAction } from 'lib/actions';\r\n// import { CommonActionTypes } from 'store/common';\r\n\r\nexport const logInAction = asyncAction('COMMON/LOG_IN');\r\n\r\n// export function setUser(user: string): CommonActionTypes {\r\n//   return {\r\n//     type: setUserAction.success,\r\n//     paylaod: user,\r\n//   };\r\n// }\r\n","import _ from 'lodash';\r\nimport { createSelectorCreator, defaultMemoize, Selector } from 'reselect';\r\nimport { RootState } from 'store/domain';\r\n\r\nexport const get = (...path: string[]) => (obj: unknown) => _.get(obj, path);\r\n\r\nconst createSelector = createSelectorCreator(defaultMemoize, _.isEqual);\r\n\r\nexport function selector<RV = unknown>(...args: unknown[]): Selector<RootState, RV> {\r\n  // @ts-ignore\r\n  return createSelector(...args);\r\n}\r\n","import { RootState } from 'store/domain';\r\nimport { selector, get } from 'lib/selectors';\r\nexport const SET_USER = 'COMMON/SET_USER';\r\n\r\nconst common = (state: RootState) => state.common;\r\nconst router = (state: RootState) => state.router;\r\n\r\n// COMMON REDUCER\r\nexport const getUser = selector(common, get('user'));\r\nexport const getUserIsLoading = selector<boolean>(getUser, get('isLoading'));\r\n\r\n// ROUTER REDUCER\r\nexport const getLocation = selector(router, get('location'));\r\nexport const getRouterHashAndQuery = selector<string>(getLocation, get('hash'));\r\nexport const getRouterHash = selector<string>(getRouterHashAndQuery, (routerHash: string) => {\r\n  const [hash, queryString] = routerHash.split('?');\r\n  return hash;\r\n});\r\nexport const getRouterQuery = selector<string>(getRouterHashAndQuery, (routerHash: string) => {\r\n  const [hash, queryString] = routerHash.split('?');\r\n  return queryString;\r\n});\r\n","import React from 'react';\r\nimport { reduxForm, InjectedFormProps, Form, Field, FormSubmitHandler } from 'redux-form';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { withFirebase } from 'components/Firebase';\r\nimport Input from 'components/Form/Input/Input';\r\nimport { WithFirebase } from 'components/Firebase/FirebaseHOC';\r\nimport { required, validEmail, minLength6 } from 'lib/validation';\r\nimport { Submit } from 'pages/SignUp';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logInAction } from 'store/common/actions';\r\nimport { getUserIsLoading } from 'store/common/selectors';\r\nimport { RootState } from 'store/domain';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport styled from 'styled-components';\r\n\r\nconst SubmitText = styled.span`\r\n  height: 30px;\r\n  width: 72px;\r\n  overflow: hidden;\r\n  & .spinner {\r\n    max-height: 30px;\r\n    width: 72px;\r\n  }\r\n`;\r\n\r\ninterface SubmitValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface OwnProps extends InjectedFormProps<SubmitValues>, WithFirebase {}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  isLoading: getUserIsLoading(state),\r\n});\r\n\r\nconst LogIn: React.FC<OwnProps> = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { isLoading } = useSelector(mapStateToProps);\r\n  const history = useHistory();\r\n  const { firebase, handleSubmit } = props;\r\n\r\n  const onSubmit: FormSubmitHandler<SubmitValues> = (values) => {\r\n    if (!isLoading) {\r\n      dispatch(logInAction({ ...values, firebase, history }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"layout\">\r\n      <div className=\"form-wrapper\">\r\n        <h1>Log In</h1>\r\n        <Form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n          <Field\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            component={Input}\r\n            type=\"email\"\r\n            validate={[required, validEmail]}\r\n          />\r\n          <Field\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            component={Input}\r\n            type=\"password\"\r\n            validate={[required, minLength6]}\r\n          />\r\n          <Submit type=\"submit\" className=\"submit \">\r\n            <SubmitText>\r\n              {isLoading ? (\r\n                <Loader\r\n                  // @ts-ignore\r\n                  className=\"spinner\"\r\n                  type=\"TailSpin\"\r\n                  color=\"#0CCE6B\"\r\n                  height={30}\r\n                  width={30}\r\n                />\r\n              ) : (\r\n                'Submit'\r\n              )}\r\n            </SubmitText>\r\n          </Submit>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(\r\n  reduxForm<SubmitValues>({ form: 'log-in' })(withFirebase(LogIn)),\r\n);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { RootState } from 'store/domain';\r\nimport { useSelector } from 'react-redux';\r\nimport { routes } from 'routes';\r\nimport { getRouterHash } from 'store/common/selectors';\r\n\r\nconst Layout = styled.div`\r\n  background-color: ${({ color }: OwnProps) => color};\r\n  transition: background-color 0.2s ease-in;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  min-width: 325px;\r\n  min-height: 480px;\r\n`;\r\n\r\ninterface OwnProps {\r\n  color?: string;\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  hashRouteName: getRouterHash(state),\r\n});\r\n\r\nconst MainLayout: React.FC = ({ children }) => {\r\n  const { hashRouteName } = useSelector(mapStateToProps);\r\n  const color = routes.find((route) => `#${route.path}` === hashRouteName);\r\n  return <Layout color={color?.backgroundColor}>{children}</Layout>;\r\n};\r\n\r\nexport default MainLayout;\r\n","import React, { useState, useEffect } from 'react';\r\nimport 'pages/NotFound/notFound.css';\r\n\r\nconst NotFound = () => {\r\n  const [opacity, setOpacity] = useState(false);\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setOpacity(true);\r\n    }, 150);\r\n  }, []);\r\n  return <div className=\"not-found\" style={{ opacity: opacity ? 1 : 0 }}></div>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport { createBrowserHistory } from 'history';\r\nimport SignUp from 'pages/SignUp';\r\nimport LogIn from 'pages/LogIn';\r\nimport MainLayout from 'components/Layout/MainLayout';\r\nimport NotFound from 'pages/NotFound/NotFound';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nexport const routes = [\r\n  {\r\n    name: 'SingUp',\r\n    Component: SignUp,\r\n    path: '/signUp',\r\n    exact: true,\r\n    backgroundColor: '#DCED31',\r\n  },\r\n  {\r\n    name: 'LogIn',\r\n    Component: LogIn,\r\n    path: '/logIn',\r\n    exact: true,\r\n    backgroundColor: '#0CCE6B',\r\n  },\r\n  {\r\n    name: 'NotFound',\r\n    Component: NotFound,\r\n    path: '/not-found',\r\n    exact: true,\r\n    backgroundColor: '#FFF',\r\n  },\r\n];\r\n\r\nexport const Router: React.FC = React.memo(() => {\r\n  return (\r\n    <ConnectedRouter history={history}>\r\n      <HashRouter>\r\n        <MainLayout>\r\n          <div className=\"transition\">\r\n            {/* <Header /> */}\r\n            <Route\r\n              render={({ location }) => (\r\n                <TransitionGroup>\r\n                  <CSSTransition key={location.pathname} timeout={150} classNames=\"forward\">\r\n                    <Switch location={location}>\r\n                      {routes.map(({ Component, path, exact, name }) => (\r\n                        <Route path={path} exact={exact} key={name} name={name}>\r\n                          <Component />\r\n                        </Route>\r\n                      ))}\r\n                      <Route path=\"/\" exact>\r\n                        <Redirect to=\"/logIn\" />\r\n                      </Route>\r\n                      <Redirect to=\"/not-found\" />\r\n                    </Switch>\r\n                  </CSSTransition>\r\n                </TransitionGroup>\r\n              )}\r\n            />\r\n          </div>\r\n        </MainLayout>\r\n      </HashRouter>\r\n    </ConnectedRouter>\r\n  );\r\n});\r\n","import { AnyAction } from 'redux';\r\nimport { CommonReducerState } from 'store/common';\r\nimport { logInAction } from 'store/common/actions';\r\n\r\nconst initialState = {\r\n  user: {\r\n    isLoading: false,\r\n    info: null,\r\n  },\r\n};\r\n\r\nexport function commonReducer(state = initialState, action: AnyAction): CommonReducerState {\r\n  switch (action.type) {\r\n    case logInAction.pending:\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          isLoading: true,\r\n        },\r\n      };\r\n    case logInAction.failure:\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          isLoading: false,\r\n          // errors: action.payload,\r\n        },\r\n      };\r\n    case logInAction.success:\r\n      return {\r\n        ...state,\r\n        user: {\r\n          isLoading: false,\r\n          info: action.payload.user,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { put } from 'redux-saga/effects';\r\nimport { Saga } from 'redux-saga';\r\nimport { History } from 'history';\r\nimport { logInAction } from 'store/common/actions';\r\nimport { FirebaseType } from 'components/Firebase/FirebaseHOC';\r\n\r\ninterface LogIn {\r\n  payload: {\r\n    email: string;\r\n    password: string;\r\n    firebase: FirebaseType;\r\n    history: History;\r\n  };\r\n}\r\n\r\nexport const logIn: Saga = function*({ payload }: LogIn) {\r\n  try {\r\n    const response = yield payload.firebase.logIn(payload.email, payload.password);\r\n    yield put({ type: logInAction.success, payload: response });\r\n  } catch (errors) {\r\n    payload.history.push('/not-found');\r\n    yield put({ type: logInAction.failure, payload: errors });\r\n  }\r\n};\r\n","import { takeLatest, fork } from 'redux-saga/effects';\r\n\r\nimport { logIn } from 'store/common/sagas';\r\nimport { logInAction } from 'store/common/actions';\r\n\r\nfunction* common() {\r\n  yield takeLatest(logInAction.pending, logIn);\r\n}\r\n\r\nexport default function*() {\r\n  yield fork(common);\r\n}\r\n","import { fork } from 'redux-saga/effects';\r\n\r\nimport common from 'sagas/common';\r\n\r\nexport default function* rootSaga() {\r\n  yield* [fork(common)];\r\n}\r\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { commonReducer } from 'store/common/reducer';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { history } from 'routes';\r\nimport rootSaga from 'sagas';\r\n\r\nconst rootReducer = combineReducers({\r\n  common: commonReducer,\r\n  router: connectRouter(history),\r\n  form: formReducer,\r\n});\r\n\r\nexport default function configureStore(initialState?: RootState) {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(routerMiddleware(history), sagaMiddleware)),\r\n  );\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n}\r\n\r\nexport const store = configureStore();\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { Router } from 'routes';\r\n\r\nimport { store } from 'store/domain';\r\nimport 'styles/global.css';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default React.memo(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}