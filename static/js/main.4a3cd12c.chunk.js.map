{"version":3,"sources":["components/Firebase/Firebase.ts","components/Firebase/FirebaseHOC.tsx","components/Form/Input/Input.tsx","lib/validation.ts","pages/SignUp/index.tsx","pages/LogIn/index.tsx","lib/selectors.ts","domain/common/selectors.ts","components/Layout/MainLayout.tsx","routes/index.tsx","domain/common/reducer.ts","domain/domain.ts","pages/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","auth","logIn","email","password","signInWithEmailAndPassword","signUp","createUserWithEmailAndPassword","logOut","signOut","firebase","initializeApp","this","FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","length","InputWrapper","styled","div","UserInput","input","Decorator","span","isActive","isValid","ErrorMessage","memo","console","log","type","placeholder","name","meta","active","value","touched","error","minLength6","undefined","required","validEmail","test","String","toLowerCase","Submit","button","reduxForm","form","handleSubmit","history","useHistory","className","Form","onSubmit","values","_","a","async","push","Field","component","Input","validate","get","path","obj","createSelector","createSelectorCreator","defaultMemoize","isEqual","selector","state","common","getLocation","router","getRouterHash","Layout","color","mapStateToProps","hashRouteName","MainLayout","children","useSelector","routes","find","route","backgroundColor","createBrowserHistory","SignUp","exact","LogIn","Router","render","location","TransitionGroup","CSSTransition","key","pathname","timeout","classNames","map","to","initialState","user","rootReducer","combineReducers","action","paylaod","connectRouter","formReducer","store","createStore","compose","composeWithDevTools","applyMiddleware","routerMiddleware","App","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a3cd12c.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n};\r\n\r\ntype auth = ReturnType<typeof firebase.auth>;\r\n\r\nclass Firebase {\r\n  auth: auth;\r\n  constructor() {\r\n    firebase.initializeApp(config);\r\n    this.auth = firebase.auth();\r\n  }\r\n\r\n  logIn = (email: string, password: string) =>\r\n    this.auth.signInWithEmailAndPassword(email, password);\r\n  signUp = (email: string, password: string) =>\r\n    this.auth.createUserWithEmailAndPassword(email, password);\r\n  logOut = () => this.auth.signOut();\r\n\r\n  //   doCreateUserWithEmailAndPassword = (email, password) =>\r\n  //     this.auth.createUserWithEmailAndPassword(email, password);\r\n  //   doSignInWithEmailAndPassword = (email, password) =>\r\n  //     this.auth.signInWithEmailAndPassword(email, password);\r\n  //   doPasswordReset = (email) => this.auth.sendPasswordResetEmail(email);\r\n  //   doPasswordUpdate = (password) => this.auth.currentUser.updatePassword(password);\r\n}\r\n\r\nexport default Firebase;\r\n","import React from 'react';\r\nimport Firebase from './Firebase';\r\n\r\nexport type FirebaseType = Firebase;\r\n\r\nexport interface WithFirebase {\r\n  firebase: FirebaseType;\r\n}\r\n\r\nconst FirebaseContext = React.createContext(new Firebase());\r\n\r\ntype HOC = <T extends WithFirebase>(\r\n  Component: React.ComponentType<T>,\r\n) => React.ComponentType<Omit<T, keyof WithFirebase>>;\r\n\r\nexport const withFirebase: HOC = <T extends WithFirebase>(\r\n  Component: React.ComponentType<T>,\r\n): React.ComponentType<Omit<T, keyof WithFirebase>> => (props) => (\r\n  <FirebaseContext.Consumer>\r\n    {(firebase: FirebaseType) => <Component {...(props as T)} firebase={firebase} />}\r\n  </FirebaseContext.Consumer>\r\n);\r\n\r\nexport default FirebaseContext;\r\n","import React, { InputHTMLAttributes } from 'react';\r\nimport { FieldType } from 'redux-form';\r\nimport styled from 'styled-components';\r\n\r\ninterface DecoratorProps {\r\n  isActive?: boolean;\r\n  isValid?: boolean;\r\n}\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  margin-top: 35px;\r\n`;\r\n\r\nconst UserInput = styled.input`\r\n  font-family: 'Poppins';\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  color: #555555;\r\n  line-height: 1.2;\r\n  display: block;\r\n  width: 100%;\r\n  height: 52px;\r\n  background: transparent;\r\n  padding: 0 5px;\r\n  border: none;\r\n  outline: none;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Decorator = styled.span`\r\n  position: absolute;\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  pointer-events: none;\r\n  &::before {\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    bottom: -2px;\r\n    left: 0;\r\n    width: 0;\r\n    height: 2px;\r\n    transition: all 0.4s;\r\n    background: #57b846;\r\n    ${({ isActive, isValid }: DecoratorProps) =>\r\n      (isActive || isValid) &&\r\n      `\r\n        width: 100%; !important;\r\n    `}\r\n    ${({ isValid }: DecoratorProps) =>\r\n      isValid &&\r\n      `\r\n        background: red !important;\r\n    `}\r\n  }\r\n  &::after {\r\n    font-family: 'Poppins';\r\n    font-weight: 500;\r\n    font-size: 18px;\r\n    color: #999999;\r\n    line-height: 1.2;\r\n    content: attr(placeholder);\r\n    display: block;\r\n    width: 100%;\r\n    position: absolute;\r\n    top: 15px;\r\n    left: 0px;\r\n    padding-left: 5px;\r\n    transition: all 0.4s;\r\n    text-align: left;\r\n    ${({ isActive }: DecoratorProps) =>\r\n      isActive &&\r\n      `\r\n        top: -20px !important;\r\n        font-size: 15px !important;\r\n    `}\r\n  }\r\n`;\r\n\r\nconst ErrorMessage = styled.span`\r\n  position: absolute;\r\n  top: 100%;\r\n  right: 0;\r\n  text-align: right;\r\n  margin: 5px;\r\n  font-size: 0.75em;\r\n  color: red;\r\n`;\r\n\r\ninterface OwnProps {}\r\n\r\nconst Input: React.FC<any> = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <InputWrapper>\r\n      <UserInput {...props.input} type={props.type} />\r\n      <Decorator\r\n        placeholder={props.input.name}\r\n        isActive={props.meta.active || props.input.value}\r\n        isValid={props.meta.touched && props.meta.error}\r\n      />\r\n      {props.meta.touched && props.meta.error && <ErrorMessage>{props.meta?.error}</ErrorMessage>}\r\n    </InputWrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(Input);\r\n","const minLength = (length: number) => (value: string) =>\r\n  value.length >= length ? undefined : `Should be at least ${length} characters long`;\r\nexport const minLength6 = minLength(6);\r\nexport const required = (value: string) => (value ? undefined : 'Required');\r\nexport const validEmail = (value: string) => {\r\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(value).toLowerCase()) ? undefined : 'Invalid email';\r\n};\r\n","import React, { useState } from 'react';\r\nimport { withFirebase } from 'components/Firebase';\r\nimport { WithFirebase } from 'components/Firebase/FirebaseHOC';\r\nimport 'styles/form.css';\r\nimport { Field, reduxForm, InjectedFormProps, Form, FormSubmitHandler } from 'redux-form';\r\nimport Input from 'components/Form/Input/Input';\r\nimport { required, minLength6, validEmail } from 'lib/validation';\r\nimport styled from 'styled-components';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const Submit = styled.button`\r\n  margin-top: 50px;\r\n  outline: none;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  padding: 10px 40px;\r\n  font-size: 20px;\r\n  font-family: 'Poppins';\r\n  font-weight: 500;\r\n  transition: box-shadow 0.15s ease-in;\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: 0px 1px 5px 1px gray;\r\n  }\r\n`;\r\n\r\ninterface SubmitValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface OwnProps extends InjectedFormProps<SubmitValues>, WithFirebase {}\r\n\r\nconst SignIn: React.FC<OwnProps> = (props) => {\r\n  const { firebase, handleSubmit } = props;\r\n  const history = useHistory();\r\n\r\n  const onSubmit: FormSubmitHandler<SubmitValues> = async (values, _, props) => {\r\n    // @ts-ignore\r\n    // values.preventDefault();\r\n    // console.log(values, props);\r\n    // e.preventDefault();\r\n    // try {\r\n    //   if (firebase) {\r\n    //     const response = await firebase.signUp(email, password);\r\n    //   }\r\n    // } catch {}\r\n    // console.log(history);\r\n    console.log(values);\r\n    history.push('/logIn');\r\n  };\r\n\r\n  return (\r\n    <div className=\"layout\">\r\n      <div className=\"form-wrapper\">\r\n        <h1>Sign Up</h1>\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Field name=\"Email\" component={Input} type=\"email\" validate={[required, validEmail]} />\r\n          <Field\r\n            name=\"Password\"\r\n            component={Input}\r\n            type=\"password\"\r\n            validate={[required, minLength6]}\r\n          />\r\n          <Submit type=\"submit\" className=\"submit \">\r\n            Submit\r\n          </Submit>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default reduxForm<SubmitValues>({ form: 'sign-up' })(withFirebase(SignIn));\r\n","import React, { useState } from 'react';\r\nimport { reduxForm, InjectedFormProps, Form, Field, FormSubmitHandler } from 'redux-form';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { withFirebase } from 'components/Firebase';\r\n// import 'styles/form.css';\r\nimport Input from 'components/Form/Input/Input';\r\nimport { WithFirebase } from 'components/Firebase/FirebaseHOC';\r\nimport { required, validEmail, minLength6 } from 'lib/validation';\r\nimport { Submit } from 'pages/SignUp';\r\n\r\ninterface SubmitValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface OwnProps extends InjectedFormProps<SubmitValues>, WithFirebase {}\r\n\r\nconst SignIn: React.FC<OwnProps> = (props) => {\r\n  const history = useHistory();\r\n  const { firebase, handleSubmit } = props;\r\n\r\n  const onSubmit: FormSubmitHandler<SubmitValues> = async (values) => {\r\n    // e.preventDefault();\r\n    // try {\r\n    //   const response = await firebase.logIn(email, password);\r\n    // } catch {}\r\n    console.log(values);\r\n    history.push('/signUp');\r\n  };\r\n\r\n  return (\r\n    <div className=\"layout\">\r\n      <div className=\"form-wrapper\">\r\n        <h1>Log In</h1>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <Field name=\"Email\" component={Input} type=\"email\" validate={[required, validEmail]} />\r\n          <Field\r\n            name=\"Password\"\r\n            component={Input}\r\n            type=\"password\"\r\n            validate={[required, minLength6]}\r\n          />\r\n          <Submit type=\"submit\" className=\"submit \">\r\n            Submit\r\n          </Submit>\r\n        </form>\r\n        {/* <form onSubmit={onSubmit}>\r\n          <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n          <button type=\"submit\">Log In</button>\r\n        </form> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default reduxForm<SubmitValues>({ form: 'log-in' })(withFirebase(SignIn));\r\n","import _ from 'lodash';\r\nimport { createSelectorCreator, defaultMemoize, Selector } from 'reselect';\r\nimport { RootState } from '../domain/domain';\r\n\r\nexport const get = (...path: string[]) => (obj: unknown) => _.get(obj, path);\r\n\r\nconst createSelector = createSelectorCreator(defaultMemoize, _.isEqual);\r\n\r\nexport function selector<RV = unknown>(...args: unknown[]): Selector<RootState, RV> {\r\n  // @ts-ignore\r\n  return createSelector(...args);\r\n}\r\n","import { RootState } from '../domain';\r\nimport { selector, get } from 'lib/selectors';\r\nexport const SET_USER = 'COMMON/SET_USER';\r\n\r\nconst common = (state: RootState) => state.common;\r\nconst router = (state: RootState) => state.router;\r\n\r\n// COMMON REDUCER\r\nexport const getUser = selector(common, get('user'));\r\n\r\n// ROUTER REDUCER\r\nexport const getLocation = selector(router, get('location'));\r\nexport const getRouterHash = selector<string>(getLocation, get('hash'));\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { RootState } from '../../domain/domain';\r\nimport { useSelector } from 'react-redux';\r\nimport { routes } from 'routes';\r\nimport { getRouterHash } from 'domain/common/selectors';\r\n\r\nconst Layout = styled.div`\r\n  background-color: ${({ color }: OwnProps) => color};\r\n  transition: background-color 0.2s ease-in;\r\n  width: 100vw;\r\n  height: 100vh;\r\n`;\r\n\r\ninterface OwnProps {\r\n  color?: string;\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  hashRouteName: getRouterHash(state),\r\n});\r\n\r\nconst MainLayout: React.FC = ({ children }) => {\r\n  const { hashRouteName } = useSelector(mapStateToProps);\r\n  const color = routes.find((route) => `#${route.path}` === hashRouteName);\r\n  return <Layout color={color?.backgroundColor}>{children}</Layout>;\r\n};\r\n\r\nexport default MainLayout;\r\n","import React from 'react';\r\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport { createBrowserHistory } from 'history';\r\nimport SignUp from 'pages/SignUp';\r\nimport LogIn from 'pages/LogIn';\r\nimport MainLayout from 'components/Layout/MainLayout';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nexport const routes = [\r\n  {\r\n    name: 'SingUp',\r\n    Component: SignUp,\r\n    path: '/signUp',\r\n    exact: true,\r\n    backgroundColor: '#DCED31',\r\n  },\r\n  {\r\n    name: 'LogIn',\r\n    Component: LogIn,\r\n    path: '/logIn',\r\n    exact: true,\r\n    backgroundColor: '#0CCE6B',\r\n  },\r\n];\r\n\r\nexport const Router: React.FC = () => {\r\n  return (\r\n    <ConnectedRouter history={history}>\r\n      <HashRouter>\r\n        <MainLayout>\r\n          <div className=\"transition\">\r\n            {/* <Header /> */}\r\n            <Route\r\n              render={({ location }) => (\r\n                <TransitionGroup>\r\n                  <CSSTransition key={location.pathname} timeout={150} classNames=\"forward\">\r\n                    <Switch location={location}>\r\n                      {routes.map(({ Component, path, exact, name }) => (\r\n                        <Route path={path} exact={exact} key={name} name={name}>\r\n                          <Component />\r\n                        </Route>\r\n                      ))}\r\n                      <Route path=\"/\">\r\n                        <Redirect to=\"/logIn\" />\r\n                      </Route>\r\n                    </Switch>\r\n                  </CSSTransition>\r\n                </TransitionGroup>\r\n              )}\r\n            />\r\n          </div>\r\n        </MainLayout>\r\n      </HashRouter>\r\n    </ConnectedRouter>\r\n  );\r\n};\r\n","import { CommonActionTypes, CommonReducerState } from 'domain/common';\r\nimport { SET_USER } from './selectors';\r\n\r\nconst initialState = {\r\n  user: null,\r\n};\r\n\r\nexport function commonReducer(state = initialState, action: CommonActionTypes): CommonReducerState {\r\n  switch (action.type) {\r\n    case SET_USER:\r\n      return {\r\n        user: action.paylaod,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { commonReducer } from 'domain/common/reducer';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { history } from 'routes';\r\n\r\nconst rootReducer = combineReducers({\r\n  common: commonReducer,\r\n  router: connectRouter(history),\r\n  form: formReducer,\r\n});\r\n\r\nexport default function configureStore(initialState?: RootState) {\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(composeWithDevTools(), applyMiddleware(routerMiddleware(history))),\r\n  );\r\n\r\n  return store;\r\n}\r\n\r\nexport const store = configureStore();\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { Router } from 'routes';\r\n\r\nimport { store } from '../../domain/domain';\r\nimport 'styles/global.css';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}